from flask import Flask, render_template, request, session, flash, redirect, session, g, jsonify
from flask_debugtoolbar import DebugToolbarExtension
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql import exists
from newsapi import NewsApiClient
from flask_login import login_user, current_user, logout_user, login_required, LoginManager
from datetime import date
from picture_handler import add_profile_pic
import datetime 
import arrow 

import os

from forms import AddUserForm, LoginForm, CommentForm, UpdateProfileForm, MessageForm
from models import db, connect_db, User, Bookmark, Comment, bcrypt, Follower, Inbox, Discussion

CURR_USER_KEY = "curr_user"
app = Flask(__name__)
newsapi = NewsApiClient(api_key='0ec714799f4242c18d921cb262b0eb60')

app.config['SQLALCHEMY_DATABASE_URI'] = (
    os.environ.get('DATABASE_URL', 'postgresql://postgres:springboard@localhost/ReadNewsComment01'))

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = False
app.config['DEBUG_TB_INTERCEPT_REDIRECTS'] = True
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', "secret")

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(user_id)

toolbar = DebugToolbarExtension(app)
connect_db(app)

######################################
# Homepage

@app.route('/')
def home():

    if g.user:
            user_id = current_user.id
            g_user = g.user.id

            if not current_user.is_authenticated:
                flash("Access unauthorized.", "danger")
                return redirect("/login")
    
            bookmarks = [bookmark for bookmark in db.session.query(Bookmark).filter_by(user_id=current_user.id)]
            return render_template('index.html', g_user=g.user, bookmarks=bookmarks, user_id=user_id)
    else:        
        topheadlines = newsapi.get_top_headlines(sources=None, category='business', q=None, language='en', country='us', page_size=12)

        articles = topheadlines['articles']
        desc = []
        news = []
        img = []
        url = []

        for i in range(len(articles)):
            myarticles = articles[i]

            news.append(myarticles['title'])
            desc.append(myarticles['description'])
            img.append(myarticles['urlToImage'])
            url.append(myarticles['url'])
            

            mylist = zip(news, desc, img, url)
        return render_template('index.html', context=mylist)


##########################################
# login/logout/signup form

@app.before_request
def add_user_to_g():
    """if we are log in"""
    if CURR_USER_KEY in session:
        g.user = User.query.get(session[CURR_USER_KEY])
    else:
        g.user = None

def do_login(user):
    """Log in user"""
    session[CURR_USER_KEY] = user.id


def do_logout():
    """logout"""
    if CURR_USER_KEY in session:
        del session[CURR_USER_KEY]


def news_top_headlines():
    """Top headline news"""

    topheadlines = newsapi.get_top_headlines(sources=None, q=None, language='en', country='us', page_size=12)

    articles = topheadlines['articles']
    desc = []
    news = []
    img = []
    url = []
    ids = []
    time = []
    saved = []
    

    for i in range(len(articles)):
        myarticles = articles[i]

        ids.append(i)
        news.append(myarticles['title'])
        desc.append(myarticles['description'])
        img.append(myarticles['urlToImage'])
        url.append(myarticles['url'])
        time.append(str(myarticles["publishedAt"])[11:-1])
        saved.append(db.session.query(Bookmark.url).filter_by(url=myarticles['url'], user_id=current_user.id).first() is not None)

        mylist = zip(ids, news, desc, img, url, saved, time)
    return render_template('/users/news.html', context=mylist)

##########
## signup

@app.route('/signup', methods=["GET", "POST"])
def signup():
    """Handle user signup form"""

    form = AddUserForm()

    if form.validate_on_submit():
        print(form.picture.data)
        try:
            user = User.signup(username=form.username.data, password=form.password.data, email=form.email.data, bio=form.bio.data)
            print(user)
            print(form.picture.data)
            if form.picture.data:
                username = user.username
                pic = add_profile_pic(form.picture.data, username)
                user.profile_image = pic
            db.session.commit()

        except IntegrityError:
            flash('username already taken', 'danger')
            return render_template('signup.html', form=form)

        return redirect('/')

    else:
        return render_template('signup.html', form=form)

###########
## login user

@app.route('/login', methods=["GET", "POST"])
def login():
    """Handle user login"""
    
    form = LoginForm()
    
    if form.validate_on_submit():
        
        user = User.authenticate(form.username.data, form.password.data)

        if user:
            login_user(user)
            user_id = current_user.id
            topheadlines = newsapi.get_top_headlines(sources=None, q=None, language='en', country='us', page_size=12)

            articles = topheadlines['articles']
            desc = []
            news = []
            img = []
            url = []
            ids = []
            time = []
            saved = []

            for i in range(len(articles)):
                myarticles = articles[i]

                ids.append(i)
                news.append(myarticles['title'])
                desc.append(myarticles['description'])
                img.append(myarticles['urlToImage'])
                url.append(myarticles['url'])
                time.append(str(myarticles["publishedAt"])[11:-1])
                saved.append(db.session.query(Bookmark.url).filter_by(url=myarticles['url'], user_id=current_user.id))

                mylist = zip(ids, news, desc, img, url, saved, time)
                return render_template('/users/news/news.html', context=mylist, form=form)
            
    
            
            news_top_headlines()
            return render_template('userHome.html', g_user=g.user, user_id=user_id)
           

        flash('invalid', 'danger')

    return render_template('/users/login.html', form=form)

##########
## logout
@app.route('/logout')
def logout():
    """Handle user logout"""

    logout_user()
    flash("You have successfully logged out.", 'success')
    return redirect('/')

###########################################
# user routes

@app.route('/users/<int:user_id>')
def news_list_users(user_id):
    """the list of users news"""

    user = User.query.get_or_404(user_id)
    
    return render_template('users/show.html', user=user)

##################################
# top headline news 


@app.route('/news/', methods=["GET", "POST"])
@login_required
def user_news_technology():
    """user business news"""

    if not current_user.is_authenticated:
        flash("Access unauthorized.", "danger")
        return redirect("/login")
    
    cat = request.args.get("cat", None)
    
    form = CommentForm()

    if request.method == 'POST':
        bookmark = db.session.query(Bookmark).filter_by(url=request.form['url'], user_id=current_user.id).first()
        # print(bookmark)
        if bookmark:
            db.session.delete(bookmark)
        else:
            new_bookmark = Bookmark(
                    news=request.form["news"],
                    description=request.form["desc"], 
                    url = request.form["url"],
                    user_id = current_user.id
                )
            # print(new_bookmark)
            db.session.add(new_bookmark)
        db.session.commit()
        return jsonify({"data": "success"})

    if request.method == "GET":
        if cat is not None and cat in ["technology", "business", "entertainment", "sports"]:
            topheadlines = newsapi.get_top_headlines(sources=None,
            category=cat, q=None, language='en', country='us', page_size=12)
        else:
            topheadlines = newsapi.get_top_headlines(sources=None, q=None, language='en', country='us', page_size=12)
            cat = None

        articles = topheadlines['articles']
        desc = []
        news = []
        img = []
        url = []
        ids = []
        time = []
        saved = []

        for i in range(len(articles)):
            myarticles = articles[i]

            ids.append(i)
            news.append(myarticles['title'])
            desc.append(myarticles['description'])
            img.append(myarticles['urlToImage'])
            url.append(myarticles['url'])
            time.append(datetime.datetime(myarticles["publishedAt"]).strftime("%a %b %d %Y"))
            saved.append(db.session.query(Bookmark.url).filter_by(url=myarticles['url'], user_id=current_user.id).first() is not None)

            mylist = zip(ids, news, desc, img, url, saved, time)
        return render_template(f'users/news/news.html', context={"cat": cat.upper() if cat is not None else "TOP HEADLINES", "mylist": mylist}, form=form)
    else:
        return render_template('404.html')


###############################
## bookmark

@app.route('/users/<int:user_id>/bookmark', methods=["GET", "POST"])
@login_required
def user_bookmark(user_id):
    """Show all bookmark list"""

    user_id = current_user.id
    

    if request.method == "GET":
        if not current_user.is_authenticated:
            flash("Access unauthorized.", "danger")
            return redirect("/login")
        
        bookmarks = [bookmark for bookmark in db.session.query(Bookmark).filter_by(user_id=current_user.id)]
        # print([bookmark.news for bookmark in bookmarks])
        return render_template('users/bookmark/bookmark.html', bookmarks=bookmarks, user_id=user_id)


def get_comments_exist(bookmark_id, comment_id=None):

    out_comments = []
    
    if comment_id is not None:
        comments = db.session.query(Comment).filter_by(bookmark=bookmark_id, parent_comment=comment_id)

    else:
        comments = db.session.query(Comment).filter_by(bookmark=bookmark_id, parent_comment=None)
    # print([comment.id for comment in comments])
    for comment in comments:
        comments_exist = db.session.query(Comment).filter_by(bookmark=bookmark_id, parent_comment=comment.id) 
        out_comments.append({
            "id": comment.id,
            "user_id": db.session.query(User).filter_by(id=comment.user_id).first().username,
            "comment": comment.comment,
            "create_date": comment.create_date.strftime("%B, %d %Y, %I:%M %p %Z"),
            "comments_exists": get_comments_exist(bookmark_id, comment.id) if comments_exist.first() is not None else None
        })

    return out_comments

#####################################
## bookmark id

@app.route('/users/<int:user_id>/bookmark/<int:bookmark_id>', methods=["GET", "POST"])
@login_required
def user_bookmark_id(user_id, bookmark_id):
    """Show bookmark id"""

    user_id = user_id
    bookmark = db.session.query(Bookmark).filter_by(id=bookmark_id).first()
    comments = db.session.query(Comment).filter_by(bookmark=bookmark_id)
    # out_comments = get_comments_exist(bookmark.id)
    # print(out_comments)
    form = CommentForm()
    return render_template('users/bookmark/bookmarkid.html', bookmark=bookmark, user_id=user_id, form=form)


###################################
## comments

@app.route('/comment/<int:bookmark_id>/', methods=["GET", "POST"])
@login_required
def comment_bookmark(bookmark_id):
    """POST comment into database"""

    user_id = current_user.id
    form = CommentForm()

    if request.method == "POST":
        try:
            text = request.form["comment"].split(":", 1)[1] if ":" in request.form["comment"] else request.form["comment"]
            new_comment = Comment(
                comment=text,
                bookmark=bookmark_id,
                user_id = current_user.id
            )
            db.session.add(new_comment)
            
            comment_id = request.form["comment"].split(":", 1)[0][1:]
            # print(comment_id)
            if comment_id.isnumeric():
                comment_exist = db.session.query(Comment).filter_by(id=comment_id)
                if comment_exist.first() is not None:
                    new_comment.parent_comment = comment_exist.first().id
            
            db.session.commit()
            # print(new_comment)
        
        except IntegrityError:
            return render_template('/', form=form)

        return redirect(f'/users/{user_id}/bookmark/{bookmark_id}')

    else:
        data = get_comments_exist(bookmark_id)
        # print(data)
        return jsonify(data)



##################################
## profile

@app.route('/profile/', methods=["GET", "POST"])
@login_required
def user_profile():
    """Edit profile"""

    form = UpdateProfileForm()

    if request.method == "GET":
        form.email.data = current_user.email
        form.bio.data = current_user.bio
        return render_template('users/profile/profile.html', form=form)

    if request.method == "POST":

        if form.validate_on_submit():
            if form.picture.data:
                username = current_user.username
                pic = add_profile_pic(form.picture.data, username)
                current_user.profile_image = pic

            if form.password.data:
                hashed_pwd = bcrypt.generate_password_hash(form.password.data).decode('UTF-8')
                current_user.password = hashed_pwd

            current_user.email = form.email.data
            current_user.bio = form.bio.data

            db.session.commit()
            # print("Account changed")

    return render_template('users/profile/profile.html', form=form)


#########################
### List all users

@app.route('/list_users/<int:user_id>/', methods=["GET", "POST"])
@login_required
def list_users(user_id):
    """List Users"""

    if request.method == 'POST':
        users_following = db.session.query(Follower).filter_by(
            user_id=current_user.id,
            user_follower_id=user_id,
        ).first()
        if users_following is None:
            new_follow = Follower(
                user_id=current_user.id,
                user_follower_id=user_id
            )
            db.session.add(new_follow)
        else:
            db.session.delete(users_following)
        db.session.commit()

    filt = request.args.get("filter")

    users = db.session.query(User).all()
    users_following = db.session.query(Follower).filter_by(user_id=current_user.id)
    if filt:
        users = [{
            "id": user.id,
            "username": user.username,
            "user_follower": user.id in [usr.user_follower_id for usr in users_following],
            "profile_image": user.get_profile_image,
        } for user in users if user.id in [usr.user_follower_id for usr in users_following]]
    else:
        users = [{
            "id": user.id,
            "username": user.username,
            "user_follower": user.id in [usr.user_follower_id for usr in users_following],
            "profile_image": user.get_profile_image,
        } for user in users]
    return render_template("users/list_users/list_users.html", users=users)


@app.route('/user_profile/<int:user_id>/', methods=["GET"])
@login_required
def user_list(user_id):
    """List Users"""

    user = db.session.query(User).filter_by(id=user_id).first()
    bookmarks = db.session.query(Bookmark).filter_by(user_id=user_id)

    return render_template("users/list_users/user_profile.html", user=user, bookmarks=bookmarks)


@app.route('/compose_message/<int:id>/', methods=["GET", "POST"])
@login_required
def compose_message(id):
    """Compose message"""

    reply = request.args.get("reply")
    form = MessageForm()
    if reply is None:
        user = db.session.query(User).filter_by(id=id).first() 
    elif reply is not None:
        discussion = db.session.query(Discussion).filter_by(id=id).first()
        message = sorted(discussion.inbox_messages, key=lambda x: x.create_date, reverse=True)[0]
        print(message)
    print(reply)
    if request.method == "POST":
        if reply is None:
            if form.validate_on_submit():
                message = Inbox(
                    user_id=user.id,
                    title=form.title.data,
                    message=form.message.data,
                    author_message=current_user.id
                )
                db.session.add(message)
                discussion = Discussion(
                    user_dis_start_id=current_user.id,
                    user_dis_follow_id=user.id,
                    title=message.title
                )
                db.session.add(discussion)
                discussion.inbox_messages.append(message)
                db.session.commit()
            else:
                print(form.errors)

        elif reply is not None:
            print("Here")
            if form.validate_on_submit():
                message_new = Inbox(
                    user_id=message.author_message,
                    title=form.title.data,
                    message=form.message.data,
                    author_message=current_user.id,
                )
                db.session.add(message_new)
                discussion.inbox_messages.append(message_new)
                db.session.commit()
            else:
                print(form.errors)

        return redirect('/inbox/')
    if reply:
        return render_template("users/mailbox/compose.html", user=message.message_from, form=form, discussion=discussion, reply=True) 
    else:
        return render_template("users/mailbox/compose.html", user=user, form=form) 

@app.route('/inbox/', methods=["GET", "POST"])
@login_required
def inbox():
    """Inbox message"""
    discussions = db.session.query(Discussion).filter(Discussion.inbox_messages.any(Inbox.user==current_user))
    print([i for i in discussions])
    messages = [{
        "id": discussion.id,
        "username": discussion.user_dis_start.username,
        "title": discussion.title,
        "content": sorted(discussion.inbox_messages, key=lambda x: x.create_date, reverse=True)[0].message[:10]
        } for discussion in discussions]
    print(messages)

    return render_template("users/mailbox/inbox.html", messages=messages)

@app.route('/inbox/<int:discussion_id>/', methods=["GET", "POST"])
@login_required
def message(discussion_id):
    """Inbox message"""
    discussion = db.session.query(Discussion).filter_by(id=discussion_id).first()
    messages = discussion.inbox_messages

    return render_template("users/mailbox/message.html", messages=messages, discussion_id=discussion_id)

